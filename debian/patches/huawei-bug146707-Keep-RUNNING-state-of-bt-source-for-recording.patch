From 0632a469085ae49aec39c5d468780d1135a794b3 Mon Sep 17 00:00:00 2001
From: Chengyi Zhao <zhaochengyi@uniontech.com>
Date: Mon, 1 Aug 2022 20:50:19 +0800
Subject: [PATCH] pulsecore: Keep RUNNING state of bt-source for Bluetooth
 recording

When the bt-source is in the RUNNING state, it does not need to enter
the IDLE and SUSPEND states, so as to avoid affecting the use of the
bt-sco-source, so the Bluetooth recording can be used normally.

Signed-off-by: Chengyi Zhao <zhaochengyi@uniontech.com>
---
 src/modules/module-huawei-adapter.c | 23 ++++++++++++++++++++++-
 src/pulsecore/core.h                |  1 +
 src/pulsecore/source.c              | 12 ++++++++++++
 src/pulsecore/source.h              |  6 ++++++
 4 files changed, 41 insertions(+), 1 deletion(-)

diff --git a/src/modules/module-huawei-adapter.c b/src/modules/module-huawei-adapter.c
index 6339d3d..b5f2eb1 100644
--- a/src/modules/module-huawei-adapter.c
+++ b/src/modules/module-huawei-adapter.c
@@ -116,6 +116,7 @@ struct userdata {
     pa_hook_slot *device_module_alsa_sink_after_new_slot;
     pa_hook_slot *device_module_alsa_source_begin_new_slot;
     pa_hook_slot *device_module_alsa_source_after_new_slot;
+    pa_hook_slot *device_module_source_set_state_slot;
     pa_hook_slot *pa_core_native_set_default_command_slot;
     //pa_hook_slot *pa_core_default_sink_changed_slot;
     //pa_hook_slot *pa_core_default_source_changed_slot;
@@ -713,6 +714,20 @@ pa_core_alsa_source_after_new_cb(pa_core *y, pa_core_alsa_source_new_data *d, st
     return PA_HOOK_OK;
 }
 
+static pa_hook_result_t 
+pa_core_source_set_state_cb(pa_core *y, pa_core_source_set_state *d, struct userdata *u)
+{
+    pa_assert(d);
+    pa_assert(d->source);
+    pa_log_debug("enter hook %s",__func__);
+
+    if ((strstr(d->source->name, "bluez_source") && d->source->state == PA_SOURCE_RUNNING) &&
+        (d->state == PA_SOURCE_IDLE || d->state == PA_SOURCE_SUSPENDED))
+        d->ret = 0;
+
+    return PA_HOOK_OK;
+}
+
 static pa_hook_result_t 
 pa_core_command_set_default_cb(pa_core *y, pa_native_command_set_default_data *d, struct userdata *u) {
     pa_assert(d);
@@ -802,6 +817,9 @@ int pa__init(pa_module*m) {
     u->device_module_alsa_source_after_new_slot =
         pa_hook_connect(pa_alsa_discovery_hook(u->alsa_discovery, PA_CORE_ALSA_HOOK_ALSA_SOURCE_AFTER_NEW),
                         PA_HOOK_NORMAL, (pa_hook_cb_t) pa_core_alsa_source_after_new_cb, u);
+    u->device_module_source_set_state_slot =
+        pa_hook_connect(pa_alsa_discovery_hook(u->alsa_discovery, PA_CORE_HOOK_SOURCE_SET_STATE),
+                        PA_HOOK_NORMAL, (pa_hook_cb_t) pa_core_source_set_state_cb, u);
     u->pa_core_native_set_default_command_slot =
         pa_hook_connect(pa_alsa_discovery_hook(u->alsa_discovery, PA_CORE_NATIVE_COMMAND_SET_DEFAULT),
                         PA_HOOK_NORMAL, (pa_hook_cb_t) pa_core_command_set_default_cb, u);                      
@@ -863,6 +881,9 @@ void pa__done(pa_module*m) {
     
     if (u->device_module_alsa_source_after_new_slot)
         pa_hook_slot_free(u->device_module_alsa_source_after_new_slot);
+
+    if (u->device_module_source_set_state_slot)
+        pa_hook_slot_free(u->device_module_source_set_state_slot);
     
     if (u->pa_core_native_set_default_command_slot)
         pa_hook_slot_free(u->pa_core_native_set_default_command_slot);
@@ -871,4 +892,4 @@ void pa__done(pa_module*m) {
         pa_bluetooth_device_module_discovery_unref(u->device_module_discovery);    
 
     pa_xfree(u);
-}
\ No newline at end of file
+}
diff --git a/src/pulsecore/core.h b/src/pulsecore/core.h
index 5a78b5c..f81f419 100644
--- a/src/pulsecore/core.h
+++ b/src/pulsecore/core.h
@@ -282,6 +282,7 @@ typedef enum pa_core_alsa_hook {
     PA_CORE_ALSA_HOOK_ALSA_SINK_AFTER_NEW,
     PA_CORE_ALSA_HOOK_ALSA_SOURCE_BEGIN_NEW,
     PA_CORE_ALSA_HOOK_ALSA_SOURCE_AFTER_NEW,
+    PA_CORE_HOOK_SOURCE_SET_STATE,
     PA_CORE_NATIVE_COMMAND_SET_DEFAULT,
     PA_CORE_ALSA_HOOK_MAX
 } pa_core_alsa_hook_t;
diff --git a/src/pulsecore/source.c b/src/pulsecore/source.c
index c11d89b..4d0b577 100644
--- a/src/pulsecore/source.c
+++ b/src/pulsecore/source.c
@@ -40,6 +40,7 @@
 #include <pulsecore/log.h>
 #include <pulsecore/mix.h>
 #include <pulsecore/flist.h>
+#include <pulsecore/shared.h>
 
 #include "source.h"
 
@@ -368,6 +369,17 @@ static int source_set_state(pa_source *s, pa_source_state_t state, pa_suspend_ca
     /* If we are resuming, suspend_cause must be 0. */
     pa_assert(!resuming || !suspend_cause);
 
+    pa_core_alsa_discovery *alsa_discovery = NULL;
+    pa_core_source_set_state hook_call_state = {0};
+
+    hook_call_state.source = s;
+    hook_call_state.state = state;
+    hook_call_state.ret = -1;
+    alsa_discovery = pa_shared_get(s->core, "pa_core_alsa_discovery");
+    pa_hook_fire(pa_alsa_discovery_hook(alsa_discovery, PA_CORE_HOOK_SOURCE_SET_STATE), &hook_call_state);
+    if (hook_call_state.ret == 0)
+        return 0;
+
     /* Here's something to think about: what to do with the suspend cause if
      * resuming the source fails? The old suspend cause will be incorrect, so we
      * can't use that. On the other hand, if we set no suspend cause (as is the
diff --git a/src/pulsecore/source.h b/src/pulsecore/source.h
index b0fa608..6558138 100644
--- a/src/pulsecore/source.h
+++ b/src/pulsecore/source.h
@@ -330,6 +330,12 @@ typedef struct pa_source_new_data {
     bool save_muted:1;
 } pa_source_new_data;
 
+typedef struct pa_core_source_set_state {
+        pa_source_state_t state;
+        pa_source *source;
+        int ret;
+} pa_core_source_set_state;
+
 pa_source_new_data* pa_source_new_data_init(pa_source_new_data *data);
 void pa_source_new_data_set_name(pa_source_new_data *data, const char *name);
 void pa_source_new_data_set_sample_spec(pa_source_new_data *data, const pa_sample_spec *spec);
-- 
2.20.1

